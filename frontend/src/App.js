import React, { useState, useEffect, useRef  } from 'react';
import './App.css';

const baseApiUrl = "http://192.168.1.10:100";

const hash = async (message) => {
  const encoder = new TextEncoder();
  const data = encoder.encode(message);
  const hashBuffer = await crypto.subtle.digest("SHA-256", data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(byte => byte.toString(16).padStart(2, "0")).join("");
};


function Login({ setStatus, setRole }) {
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [role, setRoleState] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      // Hash login and password before sending
      const hashedLogin = await hash(login);
      const hashedPassword = await hash(password);

      const response = await fetch(`${baseApiUrl}/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ login: hashedLogin, password: hashedPassword }),
      });

      const data = await response.json();
      if (response.ok) {
        setMessage(data.message);
        setStatus('success');
        setRole(data.role);  // Set the role passed from the response
      } else {
        setMessage(data.message);
      }
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  useEffect(() => {
    document.body.classList.add("centered-body");

    return () => {
      document.body.classList.remove("centered-body");
    };
  }, []);

  return (
    <div className="login">
      <div className="h1">–í—Ö–æ–¥</div>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="–õ–æ–≥–∏–Ω"
          value={login}
          onChange={(e) => setLogin(e.target.value)}
          required
        />
        <div className="password-input">
          <input
            type={showPassword ? "text" : "password"}
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <span
            className="password-toggle"
            onClick={() => setShowPassword(!showPassword)}
          >
            {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è"}
          </span>
        </div>
        <input type="submit" value="–í–æ–π—Ç–∏" className="btn" />
      </form>
      {message && <div className="message">{message}</div>}
      {role && <div className="role">–†–æ–ª—å: {role}</div>}
    </div>
  );
}

function FilePage() {
  const [files, setFiles] = useState([]);
  const [currentFolder, setCurrentFolder] = useState("–ì–ª–∞–≤–Ω–∞—è");
  const [subpath, setSubpath] = useState("");
  const [newFolderName, setNewFolderName] = useState("");
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [showCripto, setShowCripto] = useState(false);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async (path = "") => {
    try {
      const response = await fetch(`${baseApiUrl}/api/folder/${path}`);
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
      const data = await response.json();
      setFiles(data.items || []);
      setCurrentFolder(data.current_folder || "–ì–ª–∞–≤–Ω–∞—è");
      setSubpath(path);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
    }
  };

  const openFolder = (folderName) => {
    fetchData(folderName);
  };

  const goBack = () => {
    const pathParts = subpath.split("/");
    pathParts.pop();
    fetchData(pathParts.join("/"));
  };

  const handleFileChange = (event) => {
    setSelectedFiles(event.target.files);
  };

  const handleUpload = async () => {
    if (selectedFiles.length === 0) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.");
      return;
    }

    const formData = new FormData();
    for (let file of selectedFiles) {
      formData.append("file", file);
    }

    try {
      const response = await fetch(`${baseApiUrl}/upload/${subpath}`, {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        alert("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
        fetchData(subpath);
      } else {
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", error);
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏.");
    }
  };

  const createFolder = async () => {
    if (!newFolderName.trim()) return;

    const folderData = {
      folder_name: newFolderName,
      subpath: subpath,
    };

    try {
      const response = await fetch(`${baseApiUrl}/api/folder/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(folderData),
      });

      const data = await response.json();
      if (response.ok) {
        setNewFolderName('');
        fetchData(subpath);
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error);
    }
  };

  const handleDownloadFolder = async () => {
    try {
      const response = await fetch(`${baseApiUrl}/download_folder/${subpath}`);
      
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!response.ok) {
        const errorMessage = await response.text();
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: ${errorMessage || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        return;
      }
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      const blob = await response.blob();
      if (blob.size === 0) {
        alert('–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        return;
      }
  
      // –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `${currentFolder}.zip`; // –ò–º—è –∞—Ä—Ö–∏–≤–∞ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
      link.click();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏.");
    }
  };

  const criptFile = () => {
    setShowCripto(true); 
  };

  if (showCripto) {
    return <Cripto onBack={() => setShowCripto(false)} />;
  }

  return (
    <div className="app-container">
    <aside className="sidebar">
      {/* Sidebar content */}
    </aside>
    <main className="file-list-container">
      <h1 className="folder-title">{currentFolder}</h1>
  
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ */}
      <div className="button-group">
        {subpath && <button onClick={goBack} className="button back">üîô –ù–∞–∑–∞–¥</button>}
        <input
          type="text"
          placeholder="–ò–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏"
          value={newFolderName}
          onChange={(e) => setNewFolderName(e.target.value)}
          className="folder-input"
        />
        <button onClick={createFolder} className="button create-folder-btn">–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É</button>
        <input type="file" multiple onChange={handleFileChange} className="file-input" />
        <button onClick={handleUpload} className="button upload-btn">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã</button>
        <button onClick={handleDownloadFolder} className="button download-folder-btn">–°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É</button>
        <button onClick={criptFile} className="button criptFile">–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞</button>
      </div>
  
      {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
      <ul className="file-list">
        {files.map((item) => (
          <li key={item.name} className={`file-item ${item.is_dir ? 'folder' : 'file'}`}>
            <div className="file-row">
              {item.is_dir ? (
                <button className="file-button" onClick={() => openFolder(item.path)}>üìÅ {item.name}</button>
              ) : (
                <a className="file-link" href={`${baseApiUrl}/download/${item.path}`}>{item.name}</a>
              )}
            </div>
          </li>
        ))}
      </ul>
    </main>
  </div>
  
  );
}

async function hashData(data) {
  const encoder = new TextEncoder();
  const dataBuffer = encoder.encode(data);
  const hashBuffer = await crypto.subtle.digest("SHA-256", dataBuffer);
  return Array.from(new Uint8Array(hashBuffer))
    .map(b => b.toString(16).padStart(2, "0"))
    .join("");
}

function AdminPage() {
  const [users, setUsers] = useState([]);
  const [activeSessions, setActiveSessions] = useState([]);
  const [formData, setFormData] = useState({});

  useEffect(() => {
    fetch("/api/users")
      .then((response) => response.json())
      .then((data) => setUsers(data))
      .catch((error) => console.error("Error fetching users:", error));

    fetch("/api/sessions")
      .then((response) => response.json())
      .then((data) => setActiveSessions(data))
      .catch((error) => console.error("Error fetching sessions:", error));
  }, []);

  const handleChange = async (field, value) => {
    if (value) {
      const hashedValue = ["newPassword", "newAdminPassword"].includes(field)
        ? await hashData(value)
        : value;
      setFormData(prev => ({ ...prev, [field]: hashedValue }));
    } else {
      setFormData(prev => {
        const updatedForm = { ...prev };
        delete updatedForm[field];
        return updatedForm;
      });
    }
  };

  const handleSave = async (event) => {
    event.preventDefault();
    if (Object.keys(formData).length === 0) {
      alert("No changes detected");
      return;
    }

    try {
      const response = await fetch("/api/settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });
      const result = await response.json();
      alert(result.message);
    } catch (error) {
      console.error("Error saving settings:", error);
    }
  };

  const handleDisconnect = async (ip) => {
    try {
      const response = await fetch(`/api/disconnect/${ip}`, { method: "POST" });
      const result = await response.json();
      alert(result.message);
      setActiveSessions(prev => prev.filter(session => session.ip !== ip));
    } catch (error) {
      console.error("Error disconnecting user:", error);
    }
  };

  return (
    <div>
      <h1>Settings</h1>
      <form onSubmit={handleSave}>
        <a className="button log out" href="/logout">–í–µ—Ä–Ω—É—Ç—å—Å—è</a>
        <label htmlFor="selected_user_id">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
        <select
          id="selected_user_id"
          onChange={(e) => handleChange("selectedUser", e.target.value)}
        >
          <option value="">–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
          {users.map((user) => (
            <option key={user.id} value={user.id}>{user.name}</option>
          ))}
        </select>
        <br /><br />

        <label htmlFor="new_username">–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
        <input
          type="text"
          id="new_username"
          onChange={(e) => handleChange("newUsername", e.target.value)}
        />
        <br /><br />

        <label htmlFor="new_password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
        <input
          type="password"
          id="new_password"
          onChange={(e) => handleChange("newPassword", e.target.value)}
        />
        <hr />

        <label htmlFor="new_admin_name">–ù–æ–≤–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∞:</label>
        <input
          type="text"
          id="new_admin_name"
          onChange={(e) => handleChange("newAdminName", e.target.value)}
        />
        <br /><br />

        <label htmlFor="new_admin_password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:</label>
        <input
          type="password"
          id="new_admin_password"
          onChange={(e) => handleChange("newAdminPassword", e.target.value)}
        />
        <hr />

        <label htmlFor="encryption_mode">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:</label>
        <select
          id="encryption_mode"
          onChange={(e) => handleChange("encryptionMode", e.target.value)}
        >
          <option value="1">–î–∞</option>
          <option value="0">–ù–µ—Ç</option>
        </select>
        <br /><br />

        <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
      </form>

      <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h2>
      <table>
        <thead>
          <tr>
            <th>IP-–∞–¥—Ä–µ—Å</th>
            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
          </tr>
        </thead>
        <tbody>
          {activeSessions.map((session) => (
            <tr key={session.ip}>
              <td>{session.ip}</td>
              <td>
                <button onClick={() => handleDisconnect(session.ip)}>–û—Ç–∫–ª—é—á–∏—Ç—å</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function Cripto({ onBack }) {
  const [file, setFile] = useState(null);
  const [password, setPassword] = useState('');
  const [status, setStatus] = useState({ message: '', isError: false });
  const fileInputRef = useRef(null);

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const deriveKey = async (password, salt) => {
    const encoder = new TextEncoder();
    const passwordBuffer = encoder.encode(password);
    const importedKey = await window.crypto.subtle.importKey(
      'raw',
      passwordBuffer,
      { name: 'PBKDF2' },
      false,
      ['deriveKey']
    );

    return await window.crypto.subtle.deriveKey(
      {
        name: 'PBKDF2',
        salt: salt,
        iterations: 100000,
        hash: 'SHA-256'
      },
      importedKey,
      { name: 'AES-CBC', length: 256 },
      false,
      ['encrypt', 'decrypt']
    );
  };

  const encryptFile = async () => {
    if (!file || !password) {
      setStatus({ message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', isError: true });
      return;
    }

    try {
      setStatus({ message: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...', isError: false });

      // Generate a random salt and IV
      const salt = window.crypto.getRandomValues(new Uint8Array(16));
      const iv = window.crypto.getRandomValues(new Uint8Array(16));

      // Derive key from password
      const key = await deriveKey(password, salt);

      // Read file as ArrayBuffer
      const fileData = await file.arrayBuffer();

      // Encrypt the file
      const encryptedData = await window.crypto.subtle.encrypt(
        {
          name: 'AES-CBC',
          iv: iv
        },
        key,
        fileData
      );

      // Combine salt + iv + encrypted data
      const result = new Uint8Array(salt.length + iv.length + encryptedData.byteLength);
      result.set(salt, 0);
      result.set(iv, salt.length);
      result.set(new Uint8Array(encryptedData), salt.length + iv.length);

      // Create download link
      const blob = new Blob([result], { type: 'application/octet-stream' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = file.name.replace(/(\.[\w\d_-]+)$/i, 's$1');
      link.click();
      URL.revokeObjectURL(url);

      setStatus({ message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${link.download}`, isError: false });
    } catch (error) {
      console.error('Encryption error:', error);
      setStatus({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏', isError: true });
    }
  };

  const decryptFile = async () => {
    if (!file || !password) {
      setStatus({ message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', isError: true });
      return;
    }

    try {
      setStatus({ message: '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...', isError: false });

      // Read file as ArrayBuffer
      const fileData = await file.arrayBuffer();
      const dataView = new Uint8Array(fileData);

      // Extract salt, iv and encrypted data
      const salt = dataView.slice(0, 16);
      const iv = dataView.slice(16, 32);
      const encryptedData = dataView.slice(32);

      // Derive key from password
      const key = await deriveKey(password, salt);

      // Decrypt the file
      const decryptedData = await window.crypto.subtle.decrypt(
        {
          name: 'AES-CBC',
          iv: iv
        },
        key,
        encryptedData
      );

      // Create download link
      const blob = new Blob([decryptedData], { type: 'application/octet-stream' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = file.name.replace(/s(\.[\w\d_-]+)$/i, '$1');
      link.click();
      URL.revokeObjectURL(url);

      setStatus({ message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${link.download}`, isError: false });
    } catch (error) {
      console.error('Decryption error:', error);
      setStatus({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å.', isError: true });
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current.click();
  };

  return (
    <div className="App">
      <div className="container">
        <h1>–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å</h1>

        <div className="input-container">
          <label htmlFor="file">–í—ã–±—Ä–∞—Ç—å –§–∞–π–ª:</label>
          <input 
            type="file" 
            id="file" 
            ref={fileInputRef}
            onChange={handleFileChange}
            style={{ display: 'none' }}
          />
          <label htmlFor="file" className="custom-file-upload" onClick={triggerFileInput}>
            –í—ã–±—Ä–∞—Ç—å –§–∞–π–ª
          </label>
          {file && <p style={{ marginTop: '10px' }}>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file.name}</p>}
        </div>

        <div className="input-container">
          <label htmlFor="password">–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å:</label>
          <input 
            type="password" 
            id="password" 
            value={password}
            onChange={handlePasswordChange}
          />
        </div>

        <div className="button-container">
          <button id="encryptButton" onClick={encryptFile}>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å</button>
          <button id="decryptButton" onClick={decryptFile}>–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å</button>
          <button onClick={onBack} className="button log out">–í–µ—Ä–Ω—É—Ç—å—Å—è</button>
        </div>
        
        <a className="button log out" href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è</a>
        
        <p id="status" className={status.isError ? 'error' : ''}>
          {status.message}
        </p>
      </div>
    </div>
  );
}

export default function App() {
  const [status, setStatus] = useState('');
  const [role, setRole] = useState(''); 

  return status !== "success" ? (
    <Login setStatus={setStatus} setRole={setRole} />
  ) : role === 'admin' ? (
    <AdminPage />
  ) : (
    <FilePage />
  );
}
